"""initial migration for mysql

Revision ID: 50068160f559
Revises:
Create Date: 2025-09-11 18:51:08.460106

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '50068160f559'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('games',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('game_date', sa.Date(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('game_id')
    )
    op.create_table('teams',
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('team_name', sa.String(length=256), nullable=False),
    sa.PrimaryKeyConstraint('team_id'),
    sa.UniqueConstraint('team_name')
    )
    op.create_table('auction',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('task_1_bid', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_1_points', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_1_rate', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('task_2_bid', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_2_points', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_2_rate', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('task_3_bid', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_3_points', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_3_rate', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('task_4_bid', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_4_points', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_4_rate', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('total_sum', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('game_id', 'team_id')
    )
    op.create_table('chisla',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('task_1', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_2', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_3', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_4', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_5', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_sum', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('game_id', 'team_id')
    )
    op.create_table('game_teams',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('game_id', 'team_id')
    )
    op.create_table('mot',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('task_1', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_2', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_3', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_sum', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('game_id', 'team_id')
    )
    op.create_table('pairs',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('points', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('game_id', 'team_id')
    )
    op.create_table('pref',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('task_1', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_2', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_3', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_4', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_5', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_6', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_7', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('points', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('penalty', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('bonus', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_sum', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('game_id', 'team_id')
    )
    op.create_table('razobl',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('task_1', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_2', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_3', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('task_4', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('total_sum', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('game_id', 'team_id')
    )
    op.create_table('vybor',
    sa.Column('game_id', sa.Integer(), nullable=False),
    sa.Column('team_id', sa.Integer(), nullable=False),
    sa.Column('points', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.ForeignKeyConstraint(['game_id'], ['games.game_id'], ),
    sa.ForeignKeyConstraint(['team_id'], ['teams.team_id'], ),
    sa.PrimaryKeyConstraint('game_id', 'team_id')
    )

    # Create VIEW team_game_scores
    op.execute("""
    CREATE VIEW team_game_scores AS
    SELECT
        g.game_id,
        g.game_date,
        t.team_id,
        t.team_name,
        vybor.points AS vybor_points,
        chisla.total_sum AS chisla_points,
        pref.total_sum AS pref_points,
        pairs.points AS pairs_points,
        razobl.total_sum AS razobl_points,
        auction.total_sum AS auction_points,
        mot.total_sum AS mot_points,
        (
            COALESCE(vybor.points, 0) +
            COALESCE(chisla.total_sum, 0) +
            COALESCE(pref.total_sum, 0) +
            COALESCE(pairs.points, 0) +
            COALESCE(razobl.total_sum, 0) +
            COALESCE(auction.total_sum, 0) +
            COALESCE(mot.total_sum, 0)
        ) AS total_points
    FROM games g
    JOIN game_teams gt ON g.game_id = gt.game_id
    JOIN teams t ON gt.team_id = t.team_id
    LEFT JOIN vybor ON (g.game_id = vybor.game_id AND t.team_id = vybor.team_id)
    LEFT JOIN chisla ON (g.game_id = chisla.game_id AND t.team_id = chisla.team_id)
    LEFT JOIN pref ON (g.game_id = pref.game_id AND t.team_id = pref.team_id)
    LEFT JOIN pairs ON (g.game_id = pairs.game_id AND t.team_id = pairs.team_id)
    LEFT JOIN razobl ON (g.game_id = razobl.game_id AND t.team_id = razobl.team_id)
    LEFT JOIN auction ON (g.game_id = auction.game_id AND t.team_id = auction.team_id)
    LEFT JOIN mot ON (g.game_id = mot.game_id AND t.team_id = mot.team_id)
    """)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute("DROP VIEW IF EXISTS team_game_scores")
    op.drop_table('vybor')
    op.drop_table('razobl')
    op.drop_table('pref')
    op.drop_table('pairs')
    op.drop_table('mot')
    op.drop_table('game_teams')
    op.drop_table('chisla')
    op.drop_table('auction')
    op.drop_table('teams')
    op.drop_table('games')
    # ### end Alembic commands ###
